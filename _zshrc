# vim:filetype=zsh
stty stop undef

# fpath
fpath=($HOME/.zsh/zsh-completions/src(N-/) $fpath)
fpath=($HOME/.zsh/complention $fpath)

# 環境変数
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
HIST_STAMPS="mm/dd/yyyy"
export LANG=ja_JP.UTF-8
export PATH="$HOME/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
export LP_PS1_POSTFIX="
 > "
export ENHANCD_FILTER="fzf"
export GOPATH=~/

# options
setopt always_last_prompt
setopt append_history
setopt auto_cd
setopt auto_menu
setopt auto_param_keys
setopt auto_remove_slash
setopt brace_ccl
setopt complete_in_word
setopt extended_glob
setopt extended_history
setopt globdots
setopt hist_expire_dups_first
setopt hist_find_no_dups
setopt hist_ignore_all_dups
setopt hist_ignore_space
setopt hist_no_functions
setopt hist_no_store
setopt hist_reduce_blanks
setopt hist_save_nodups
setopt hist_verify
setopt inc_append_history
setopt list_types
setopt magic_equal_subst
setopt mark_dirs
setopt no_beep
setopt no_hist_beep
setopt no_list_beep
setopt print_eight_bit
setopt share_history

# autoloads
# U: 展開される関数の内部で alias の展開をしない
# z: zsh 形式で読み込む
autoload -Uz add-zsh-hook
autoload -Uz colors; colors
autoload -Uz colors; colors
autoload -Uz compinit; compinit -u
autoload -Uz compinit; compinit -u
autoload -Uz history-search-end
autoload -Uz modify-current-argument
autoload -Uz run-help
autoload -Uz run-help-git
autoload -Uz smart-insert-last-word
autoload -Uz vcs_info
autoload -Uz zcalc
autoload -Uz zmv

# styles
# 補完関数の表示を強化する
zstyle ':completion:*:default' menu select=2
zstyle ':completion:*' verbose yes
zstyle ':completion:*' completer _expand _complete _match _prefix _approximate _list _history
zstyle ':completion:*:messages' format '%F{YELLOW}%d'$DEFAULT
zstyle ':completion:*:warnings' format '%F{RED}No matches for:''%F{YELLOW} %d'$DEFAULT
zstyle ':completion:*:descriptions' format '%F{YELLOW}completing %B%d%b'$DEFAULT
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:descriptions' format '%F{yellow}Completing %B%d%b%f'$DEFAULT
# 補完時に大文字と小文字を区別しない
zstyle ':complention:*' matcher-list 'm:{a-z}={A-Z}'
# マッチ種別を別々に表示
zstyle ':completion:*' group-name ''
# セパレータを設定する
zstyle ':completion:*' list-separator '-->'
zstyle ':completion:*:manuals' separate-sections true
# ファイル補完候補に色を付ける
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# Keybind
bindkey -e
bindkey "\e[Z" reverse-menu-complete

# Plugins
source ~/.zplug/zplug
export ZPLUG_PROTOCOL="SSH"
zplug "b4b4r07/zplug"
zplug "nojhan/liquidprompt"
zplug "b4b4r07/enhancd", of:enhancd.sh
zplug "mollifier/anyframe"
zplug "mollifier/cd-gitroot"
zplug "holman/spark", as:command, of:spark, file:spark
zplug "upamune/tw", as:command, from:gh-r, file:tw
zplug "upamune/miscripts"
zplug "junegunn/fzf", as:command, of:bin/fzf-tmux
zplug "junegunn/fzf-bin", \
    as:command, \
    from:gh-r, \
    file:fzf, \
    of:"*linux*amd64*"
zplug "stedolan/jq", \
    as:command, \
    file:jq, \
    from:gh-r \
    | zplug "b4b4r07/emoji-cli"
# after executing compinit command
zplug "zsh-users/zsh-syntax-highlighting", nice:10
# Install plugins if there are plugins that have not been installed
zplug check || zplug install
# source plugins and add commands to $PATH
zplug load

# alias
alias ls='ls --color'
alias l='ls'
alias mv='mv -i'
alias -g cp='cp -i'
alias -g grep='grep --color=auto --exclude-dir={.bzr,.cvs,.git,.hg,.svn}'
alias -g mkdir='mkdir -p'
alias -g vimconfig='vim ~/.vimrc'
alias -g zshconfig='vim ~/.zshrc'
alias -g C='| xsel --input --clipboard'
alias -g L='| less'
alias -g G='| grep'
alias -g N='&& notify'
alias -g v='vim'
alias -g vi='vim'
alias -g vim='nvim'
alias g='git'
alias -g B='`git branch -a | peco --prompt "GIT BRANCH>" | head -n 1 | sed -e "s/^\*\s*//g"`'
alias -g R='`git remote | peco --prompt "GIT REMOTE>" | head -n 1`'
alias cdu='cd-gitroot'
alias cdd="cd $GOPATH/src/github.com/$USER"
alias gd="godic search "

# git settings
git config --global alias.a 'add'
git config --global alias.b 'checkout -b'
git config --global alias.c 'commit -v'
git config --global alias.d 'diff'
git config --global alias.o 'checkout'
git config --global alias.p 'pull'
git config --global alias.pu 'push'
git config --global alias.puu 'push -u'
git config --global ghq.root "$HOME/src"
git config --global core.editor vim
git config --global user.email "jajkeqos@gmail.com"
git config --global user.name "upamune"
git config --global github.user upamune
git config --global diff.algorithm histogram

# tmuxがインストールされていたら自動的に起動してアタッチする
if which tmux > /dev/null 2>&1 ; then
  if [ -z $TMUX ] ; then
    if [ -z `tmux ls` ] ; then
      tmux -2
    else
      tmux -2 attach
    fi
  fi
fi

# cd したら ls する(大量のファイル/ディレクトリがあるときは省略する)
add-zsh-hook chpwd ls_abbrev
ls_abbrev() {
  # -a : Do not ignore entries starting with ..
  # -C : Force multi-column output.
  # -F : Append indicator (one of */=>@|) to entries.
  local cmd_ls='ls'
  local -a opt_ls
  opt_ls=('-CF' '--color=always')
  case "${OSTYPE}" in
    freebsd*|darwin*)
      if type gls > /dev/null 2>&1; then
        cmd_ls='gls'
      else
        # -G : Enable colorized output.
        opt_ls=('-aCFG')
      fi
      ;;
  esac

  local ls_result
  ls_result=$(CLICOLOR_FORCE=1 COLUMNS=$COLUMNS command $cmd_ls ${opt_ls[@]} | sed $'/^\e\[[0-9;]*m$/d')

  local ls_lines=$(echo "$ls_result" | wc -l | tr -d ' ')

  if [ $ls_lines -gt 10 ]; then
    echo "$ls_result" | head -n 5
    echo '...'
    echo "$ls_result" | tail -n 5
    echo "$(command ls -1 -A | wc -l | tr -d ' ') files exist"
  else
    echo "$ls_result"
  fi
}

# 空でEnterを押すと ls した結果と git status が表示される
zle -N do_enter
bindkey '^m' do_enter



# rbenv があったら初期化処理を追加する
if which rbenv > /dev/null 2>&1 ; then
  eval "$(rbenv init -)"
fi

# vitualenvwrapperのスクリプトを実行する
if which virtualenvwrapper.sh > /dev/null 2>&1 ; then
  export WORKON_HOME=$HOME/.virtualenvs
  source `which virtualenvwrapper.sh`
fi

#OS 別設定
case ${OSTYPE} in
  # For MacOS
  darwin*)
  # Brew Cask 用の設定
  export HOMEBREW_CASK_OPTS="—appdir=/Applications"
  # Cでクリップボードにコピーできるようにする
  if which pbcopy > /dev/null 2>&1 ; then
    alias -g C='| pbcopy'
  fi

  ;;
  # For Linux
  linux*)

  export PATH=$ANDROID_HOME/tools:$PATH
  export PATH=$ANDROID_HOME/platform-tools:$PATH

  if [[ -d $HOME/.nvm ]] ; then
    export NVM_DIR=$HOME/.nvm
    source /usr/share/nvm/init-nvm.sh
  fi
  # systemctl のエイリアスを設定する
  if which systemctl > /dev/null 2>&1 ; then
    alias -g sctl='systemctl'
  fi

  # machinectl のエイリアスを設定する
  if which machinectl > /dev/null 2>&1 ; then
    alias -g mctl='machinectl'
  fi

  # CapsをCtrlに置換する
  if [[ -f $HOME/.xmodmap ]]; then
    xmodmap .xmodmap > /dev/null 2>&1
  fi

  # xdg-open を openにエイリアス
  alias open='xdg-open'

  # fcitxが存在したら環境変数を設定する
  if which fcitx > /dev/null 2>&1 ; then
    export GTK_IM_MODULE=fcitx
    export QT_IM_MODULE=fcitx
    export XMODIFIERS="@im=fcitx"
  fi

  # javaws が存在したらtopcoderにエイリアス
  if which javaws > /dev/null 2>&1 ; then
    alias topcoder='javaws /usr/local/bin/ContestAppletProd.jnlp&'
  fi

  # Ruby2.2 がインストールされてたらPATHを通す
  if [ -d $HOME/.gem/ruby/2.2.0/bin ]; then
    export PATH=$PATH:$HOME/.gem/ruby/2.2.0/bin
    export PATH=$PATH:$HOME/.gem/ruby/2.3.0/bin
  fi

  # herokuが存在したらPATHを通す
  if [ -d /usr/local/heroku ]; then
    PATH=/usr/local/heroku/bin:$PATH
  fi

  # xselが存在したらCでクリップボードにコピーできるようにする
  if which xsel > /dev/null 2>&1 ; then
    alias -g C='| xsel --input --clipboard'
  fi

  # addon-sdk が存在したらエイリアス
  if [ -d /opt/addon-sdk ] ; then
    alias addon-sdk='cd /opt/addon-sdk && source bin/activate; cd -'
  fi

  if which docker > /dev/null 2>&1 ; then
    alias -g P='`docker ps | tail -n +2 | peco | cut -d" " -f1`'
  fi

  ;;
esac

# oh-my-zsh が R を指定しているので、それより後に書く必要がある
# 検索時に大文字小文字を区別しないが、大文字で検索すると大文字だけヒットする
# ファイル名、現在位置を表示
# ANSI Color Escape Sequenceを色表示
# 1行を折り返さない
export LESS='-iMRS'

# Functions
function do_enter() {
if [ -n "$BUFFER" ]; then
  zle accept-line
  return 0
fi
echo
ls_abbrev
if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
  echo
  echo -e "\e[0;33m--- git status ---\e[0m"
  git status -sb
  echo "\n"
fi
zle reset-prompt
return 0
  }

  # miscripts にパスを通す
  if zplug check upamune/miscripts; then
    source $ZPLUG_HOME/repos/upamune/miscripts/sh/*
    export PATH="$ZPLUG_HOME/repos/upamune/miscripts/sh:$PATH"
  fi

  # fzf の設定
  if zplug check junegunn/fzf-bin; then
    export FZF_DEFAULT_OPTS='
    --extended
    --cycle
    --multi
    --bind ctrl-b:page-down,ctrl-d:page-up
    --color fg:188,bg:233,hl:103,fg+:222,bg+:234,hl+:104
    --color info:183,prompt:110,spinner:107,pointer:167,marker:215
    '
    # fh - repeat history
    fh() {
      eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf-tmux +s --tac | sed 's/ *[0-9]* *//')
    }
    # cdf - cd into the directory of the selected file
    cdf() {
      local file
      local dir
      file=$(fzf-tmux +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
    }

    # fe [FUZZY PATTERN] - Open the selected file with the default editor
    #   - Bypass fuzzy finder if there's only one match (--select-1)
    #   - Exit if there's no match (--exit-0)
    fe() {
      IFS='
      '
      local declare files=($(fzf-tmux --query="$1" --select-1 --exit-0))
      [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
    }

    # Modified version where you can press
    #   - CTRL-O to open with `open` command,
    #   - CTRL-E or Enter key to open with the $EDITOR
    fo() {
      local out file key
      out=$(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e)
      key=$(head -1 <<< "$out")
      file=$(head -2 <<< "$out" | tail -1)
      if [ -n "$file" ]; then
        [ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
      fi
    }
fi

# anyframe の設定
if zplug check mollifier/anyframe; then
  # Ctrl-XPでコマンドを挿入できるようにする
  zle -N fzf-put-history
  bindkey '^x^p' fzf-put-history

  # ghq + fzf
  zle -N fzf-src
  bindkey '^x^g' fzf-src

  # Ctrl-XCでcdrをfzfで開く
  bindkey "^x^d" anyframe-widget-cdr

  # Ctrl-XBでブランチをfzfで切り替える
  bindkey "^x^b" anyframe-widget-checkout-git-branch

  # Ctrl-XKでkillするプロセスをfzfで選ぶ
  bindkey "^x^k" anyframe-widget-kill
fi

function fzf-put-history() {
builtin history -n -r 1 \
  | anyframe-selector-auto "$LBUFFER" \
  | anyframe-action-put
}


function fzf-src () {
local selected_dir=$(ghq list -p | fzf-tmux --query "$LBUFFER")
if [ -n "$selected_dir" ]; then
  BUFFER="builtin cd ${selected_dir}"
  zle accept-line
fi
zle clear-screen
}

function vv () {
vim $( sift -n "$@" | fzf | awk -F : '{print "+"$2" " $1}')
}

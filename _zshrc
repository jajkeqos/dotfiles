# vim:filetype=zsh

# 環境変数
export LANG=ja_JP.UTF-8
export PATH="$HOME/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
export EDITOR=vim
#git 補完できるように
fpath=(~/.zsh/complention $fpath)
# 色を使用出来るようにする
autoload -Uz colors
colors
# 補完機能を有効にする
autoload -Uz compinit
compinit
# 補完時に大文字と小文字を区別しない
zstyle ':complention:*' matcher-list 'm:{a-z}={A-Z}'
# C-w の挙動を変える(細かく消す)
autoload -Uz select-word-style
select-word-style default
zstyle ':zle:*' word-chars " /=;@:{},|"
zstyle ':zle:*' word-style unspecified
# Emacs 風キーバインドにする
bindkey -e
# ヒストリの設定
HISTFILE=~/.zsh_history
HISTSIZE=1000000
SAVEHIST=1000000
HIST_STAMPS="mm/dd/yyyy"
# ヒストリに保存するときに余分なスペースを削除する
setopt hist_reduce_blanks
# 同時に起動したzshの間でヒストリを共有する
setopt share_history
# 同じコマンドをヒストリに残さない
setopt hist_ignore_all_dups
# 履歴をインクリメンタルサーチできるようにする
bindkey '^r' history-incremental-pattern-search-backward
bindkey '^s' history-incremental-pattern-search-forward

# '#' 以降をコメントとして扱う
setopt interactive_comments

# ディレクトリ名だけでcdできるようにする
setopt AUTO_CD

# 最近移動したディレクトリに移動できるようにする
autoload -Uz add-zsh-hook
autoload -Uz chpwd_recent_dirs cdr
zstyle ":chpwd:*" recent-dirs-max 500
add-zsh-hook chpwd chpwd_recent_dirs

# Ctrl-Dでzshを終了しない
setopt IGNORE_EOF

# Ctrl-Q/Ctrl-Sのフローコントロールを無効にする
setopt NO_FLOW_CONTROL

# beep音を無効にする
setopt NO_BEEP

# cd したら ls する(大量のファイル/ディレクトリがあるときは省略する)
add-zsh-hook chpwd ls_abbrev
ls_abbrev() {
  # -a : Do not ignore entries starting with ..
  # -C : Force multi-column output.
  # -F : Append indicator (one of */=>@|) to entries.
  local cmd_ls='ls'
  local -a opt_ls
  opt_ls=('-CF' '--color=always')
  case "${OSTYPE}" in
    freebsd*|darwin*)
      if type gls > /dev/null 2>&1; then
        cmd_ls='gls'
      else
        # -G : Enable colorized output.
        opt_ls=('-aCFG')
      fi
      ;;
  esac

  local ls_result
  ls_result=$(CLICOLOR_FORCE=1 COLUMNS=$COLUMNS command $cmd_ls ${opt_ls[@]} | sed $'/^\e\[[0-9;]*m$/d')

  local ls_lines=$(echo "$ls_result" | wc -l | tr -d ' ')

  if [ $ls_lines -gt 10 ]; then
    echo "$ls_result" | head -n 5
    echo '...'
    echo "$ls_result" | tail -n 5
    echo "$(command ls -1 -A | wc -l | tr -d ' ') files exist"
  else
    echo "$ls_result"
  fi
}

# 空でEnterを押すと ls した結果と git status が表示される
zle -N do_enter
bindkey '^m' do_enter

# エイリアス
alias mv='mv -i'
alias -g cp='cp -i'
alias -g grep='grep --color=auto --exclude-dir={.bzr,.cvs,.git,.hg,.svn}'
alias -g mkdir='mkdir -p'
alias -g vimconfig='vim ~/.vimrc'
alias -g zshconfig='vim ~/.zshrc'
alias -g L='| less'
alias -g G='| grep'
alias -g v='gvim'
alias -g vi='vim'

# Git
alias g='git'
alias -g B='`git branch -a | peco --prompt "GIT BRANCH>" | head -n 1 | sed -e "s/^\*\s*//g"`'
alias -g R='`git remote | peco --prompt "GIT REMOTE>" | head -n 1`'

if which go > /dev/null 2>&1 ; then
  # For Go
  export GOPATH=~/
fi

# rbenv があったら初期化処理を追加する
if which rbenv > /dev/null 2>&1 ; then
  eval "$(rbenv init -)"
fi

#OS 別設定
case ${OSTYPE} in
  # For MacOS
  darwin*)
  # Brew Cask 用の設定
  export HOMEBREW_CASK_OPTS="—appdir=/Applications"
  # Cでクリップボードにコピーできるようにする
  if which pbcopy > /dev/null 2>&1 ; then
    alias -g C='| pbcopy'
  fi

  # nvmがインストールされていたら環境変数を設定する
  if [[ -d $HOME/.nvm ]] ; then
    export NVM_DIR=$HOME/.nvm
    source $(brew --prefix nvm)/nvm.sh
  fi
  ;;
  # For Linux
  linux*)
  # vitualenvwrapperのスクリプトを実行する
  if which virtualenvwrapper.sh > /dev/null 2>&1 ; then
    export WORKON_HOME=$HOME/.virtualenvs
    source `which virtualenvwrapper.sh`
  fi
  # systemctl のエイリアスを設定する
  if which systemctl > /dev/null 2>&1 ; then
    alias -g sctl='systemctl'
  fi

  # machinectl のエイリアスを設定する
  if which machinectl > /dev/null 2>&1 ; then
    alias -g mctl='machinectl'
  fi

  # CapsをCtrlに置換する
  if [[ -f $HOME/.xmodmap ]]; then
    xmodmap .xmodmap > /dev/null 2>&1
  fi

  # xdg-open を openにエイリアス
  alias open='xdg-open'

  # fcitxが存在したら環境変数を設定する
  if which fcitx > /dev/null 2>&1 ; then
    export GTK_IM_MODULE=fcitx
    export QT_IM_MODULE=fcitx
    export XMODIFIERS="@im=fcitx"
  fi

  # javaws が存在したらtopcoderにエイリアス
  if which javaws > /dev/null 2>&1 ; then
    alias topcoder='javaws /usr/local/bin/ContestAppletProd.jnlp&'
  fi

  # Ruby2.2 がインストールされてたらPATHを通す
  if [ -d $HOME/.gem/ruby/2.2.0/bin ]; then
    export PATH=$PATH:$HOME/.gem/ruby/2.2.0/bin
  fi

  # herokuが存在したらPATHを通す
  if [ -d /usr/local/heroku ]; then
    PATH=/usr/local/heroku/bin:$PATH
  fi

  # xselが存在したらCでクリップボードにコピーできるようにする
  if which xsel > /dev/null 2>&1 ; then
    alias -g C='| xsel --input --clipboard'
  fi

  # addon-sdk が存在したらエイリアス
  if [ -d /opt/addon-sdk ] ; then
    alias addon-sdk='cd /opt/addon-sdk && source bin/activate; cd -'
  fi

  # HOME直下に.nvmが存在したら環境変数を設定する
  if [ -d $HOME/.nvm ] ; then
    source /usr/share/nvm/init-nvm.sh
  fi

  # nvmが存在したらnvmのinitとnodeのバージョンを指定する
  if which nvm > /dev/null 2>&1 ; then
    nvm use v0.10.38 > /dev/null
    export PATH=$HOME/.nvm/v0.10.38/bin:$PATH
  fi
  ;;
esac

if [[ -f $HOME/.zsh/antigen/antigen.zsh ]]; then
  source $HOME/.zsh/antigen/antigen.zsh
  antigen use oh-my-zsh
  antigen bundle zsh-users/zsh-completions src
  antigen bundle zsh-users/zsh-syntax-highlighting
  antigen bundle mollifier/anyframe
  antigen bundle m4i/cdd
  antigen bundle upamune/zgit-repo-user-config
  antigen bundle b4b4r07/enhancd
  antigen apply
  antigen update

  PROMPT='%{$fg_bold[green]%}${PWD/#$HOME/~}%{$reset_color%}$(git_prompt_info) ⌚ %{$fg_bold[red]%}%*%{$reset_color%}
$ '

  ZSH_THEME_GIT_PROMPT_PREFIX=" on %{$fg[magenta]%}⭠ "
  ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%}"
  ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[red]%}!"
  ZSH_THEME_GIT_PROMPT_UNTRACKED="%{$fg[green]%}?"
  ZSH_THEME_GIT_PROMPT_CLEAN=""

  # zsh-completions の設定
  fpath=($HOME/.zsh/zsh-completions/src(N-/) $fpath)

  # enhancd の設定
  export ENHANCD_FILTER=peco

  # anyframe の設定
  # Ctrl-XPでコマンドを挿入できるようにする
  zle -N peco-put-history
  bindkey '^x^p' peco-put-history
  # Ctrl-xwでtmuxのウィンドウを切り替えられるようにする
  zle -N peco-tmux
  bindkey '^xw' peco-tmux

  # ghq + peco
  zle -N peco-src
  bindkey '^x^g' peco-src

  # Ctrl-XCでcdrをpecoで開く
  bindkey "^x^d" anyframe-widget-cdr

  # Ctrl-XBでブランチをpecoで切り替える
  bindkey "^x^b" anyframe-widget-checkout-git-branch

  # Ctrl-XKでkillするプロセスをpecoで選ぶ
  bindkey "^x^k" anyframe-widget-kill

  # Ctrl-XKでkillするプロセスをpecoで選ぶ
  bindkey "^x^k" anyframe-widget-kill

  # tw の設定
  if which tw > /dev/null 2>&1 ; then
    # Ctrl-XTRでRT
    zle -N peco-retweet-tweet
    bindkey "^x^r" peco-retweet-tweet

    # Ctrl-XTFでFAV
    zle -N peco-favorite-tweet
    bindkey "^x^f" peco-favorite-tweet

  fi

  # cdd の設定
  if [[ -f $HOME/.antigen/repos/https-COLON--SLASH--SLASH-github.com-SLASH-m4i-SLASH-cdd.git/cdd ]]; then
    source $HOME/.antigen/repos/https-COLON--SLASH--SLASH-github.com-SLASH-m4i-SLASH-cdd.git/cdd
    touch $CDD_FILE
    autoload -Uz add-zsh-hook
    add-zsh-hook chpwd _cdd_chpwd
  fi
fi

touch $HOME/.zgitrepo_user.config
export ZGITREPO_USER_CONFIG_FILE=$HOME/.zgitrepo_user.config
add-zsh-hook precmd zgit-repo-user-config

# tmuxがインストールされていたら自動的に起動してアタッチする
if which tmux > /dev/null 2>&1 ; then
  if [ -z $TMUX ] ; then
    if [ -z `tmux ls` ] ; then
      tmux
    else
      tmux attach
    fi
  fi
fi

# oh-my-zsh が R を指定しているので、それより後に書く必要がある
# 検索時に大文字小文字を区別しないが、大文字で検索すると大文字だけヒットする
# ファイル名、現在位置を表示
# ANSI Color Escape Sequenceを色表示
# 1行を折り返さない
export LESS='-iMRS'

# Functions
function do_enter() {
if [ -n "$BUFFER" ]; then
  zle accept-line
  return 0
fi
echo
ls_abbrev
if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
  echo
  echo -e "\e[0;33m--- git status ---\e[0m"
  git status -sb
  echo "\n"
fi
zle reset-prompt
return 0
  }

  function zman() {
  PAGER="less -g -s '+/^       "$1"'" man zshall
}

function peco-put-history() {
builtin history -n -r 1 \
  | anyframe-selector-auto "$LBUFFER" \
  | anyframe-action-put
}

function peco-tmux() {
local i=$(tmux lsw | awk '/active.$/ {print NR-1}')
local f='#{window_index}: #{window_name}#{window_flags} #{pane_current_path}'
tmux lsw -F "$f" \
  | anyframe-selector-auto "" --initial-index $i \
  | cut -d ':' -f 1 \
  | anyframe-action-execute tmux select-window -t
}

function peco-src () {
local selected_dir=$(ghq list -p | peco --query "$LBUFFER")
if [ -n "$selected_dir" ]; then
  BUFFER="builtin cd ${selected_dir}"
  zle accept-line
fi
zle clear-screen
}

function agvim () {
vim $(ag $@ | peco --query "$LBUFFER" | awk -F : '{print "-c " $2 " " $1}')
}

function peco-delete-tweet() {
tw tl 100 --with-id --user $1 | peco --prompt "TWEET> " | awk '{print $NF}' | tw del --pipe
}

function peco-retweet-tweet() {
tw tl 100 --with-id | peco --prompt "TWEET> " | awk '{print $NF}' | tw rt --pipe
}

function peco-favorite-tweet() {
tw tl 100 --with-id | peco --prompt "TWEET> " | awk '{print $NF}' | tw fav --pipe
}

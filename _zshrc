############################################
#     _______| |__  _ __ ___  | |__  _   _ #
#    |_  / __| '_ \| '__/ __| | '_ \| | | |#
# _   / /\__ \ | | | | | (__  | |_) | |_| |#
#(_) /___|___/_| |_|_|  \___| |_.__/ \__, |#
#                                    |___/ #
#   _        _ _                           #
#  (_) __ _ (_) | _____  __ _  ___  ___    #
#  | |/ _` || | |/ / _ \/ _` |/ _ \/ __|   #
#  | | (_| || |   <  __/ (_| | (_) \__ \   #
# _/ |\__,_|/ |_|\_\___|\__, |\___/|___/   #
#|__/     |__/             |_|             #
############################################


# 環境変数
export LANG=ja_JP.UTF-8
export PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"

#git 補完できるように
fpath=(~/.zsh/complention $fpath)
 
# 色を使用出来るようにする
autoload -Uz colors
colors
# 補完機能を有効にする
autoload -Uz compinit
compinit
# 補完時に大文字と小文字を区別しない
zstyle ':complention:*' matcher-list 'm:{a-z}={A-Z}'
# C-w の挙動を変える(細かく消す)
autoload -Uz select-word-style 
select-word-style default
zstyle ':zle:*' word-chars " /=;@:{},|"
zstyle ':zle:*' word-style unspecified

# Emacs 風キーバインドにする
bindkey -e
 

# プロンプトの設定
autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git 
zstyle ':vcs_info:*' max-exports 6 # formatに入る変数の最大数
zstyle ':vcs_info:git:*' check-for-changes true
zstyle ':vcs_info:git:*' formats '%b@%r' '%c' '%u'
zstyle ':vcs_info:git:*' actionformats '%b@%r|%a' '%c' '%u'
setopt prompt_subst
function vcs_echo {
  local st branch color
  STY= LANG=en_US.UTF-8 vcs_info
  st=`git status 2> /dev/null`
  if [[ -z "$st" ]]; then return; fi
  branch="$vcs_info_msg_0_"
  if   [[ -n "$vcs_info_msg_1_" ]]; then color=${fg[green]} #staged
  elif [[ -n "$vcs_info_msg_2_" ]]; then color=${fg[red]} #unstaged
  elif [[ -n `echo "$st" | grep "^Untracked"` ]]; then color=${fg[blue]} # untracked
  else color=${fg[cyan]}
  fi
  echo "%{$color%}(%{$branch%})%{$reset_color%}" | sed -e s/@/"%F{yellow}@%f%{$color%}"/
}
PROMPT='%F{yellow}[%~]%f `vcs_echo` %(?.$.%F{red}$%f) '

# ヒストリの設定
HISTFILE=~/.zsh_history
HISTSIZE=1000000
SAVEHIST=1000000
HIST_STAMPS="mm/dd/yyyy"
# ヒストリに保存するときに余分なスペースを削除する
setopt hist_reduce_blanks
# 同時に起動したzshの間でヒストリを共有する
setopt share_history
# 同じコマンドをヒストリに残さない
setopt hist_ignore_all_dups
# 履歴をインクリメンタルサーチできるようにする
bindkey '^r' history-incremental-pattern-search-backward 
bindkey '^s' history-incremental-pattern-search-forward

# '#' 以降をコメントとして扱う
setopt interactive_comments

# ディレクトリ名だけでcdできるようにする
setopt AUTO_CD

# 最近移動したディレクトリに移動できるようにする
autoload -Uz add-zsh-hook
autoload -Uz chpwd_recent_dirs cdr
add-zsh-hook chpwd chpwd_recent_dirs

# Ctrl-Dでzshを終了しない
setopt IGNORE_EOF

# Ctrl-Q/Ctrl-Sのフローコントロールを無効にする
setopt NO_FLOW_CONTROL

# beep音を無効にする
setopt NO_BEEP

# エイリアス
alias l='ls --color=auto'
alias ls='ls --color=auto'
alias la='ls -a'
alias ll='ls -l'
alias cp='cp -i'
alias mv='mv -i'
alias mkdir='mkdir -p'
alias hist='history'
alias vimconfig='vim ~/.vimrc'
alias zshconfig='vim ~/.zshrc'
alias -g L='| less'
alias -g G='| grep'

#OS 別設定
case ${OSTYPE} in
  # For MacOS
  darwin*)
    echo hi
    # rmtrashが存在したらrmをrmtrashにエイリアスする
    if which rmtrash > /dev/null 2>&1 ; then
      alias -g rm='rmtrash'
    fi

    # Cでクリップボードにコピーできるようにする
    if which pbcopy > /dev/null 2>&1 ; then
      alias -g C='| pbcopy'
    fi
  ;;
  # For Linux
  linux*)
    # fcitxが存在したら環境変数を設定する
    if which fcitx > /dev/null 2>&1 ; then
      export GTK_IM_MODULE=fcitx
      export QT_IM_MODULE=fcitx
      export XMODIFIERS=”@im=fcitx”
    fi

    # xselが存在したらCでクリップボードにコピーできるようにする
    if which xsel > /dev/null 2>&1 ; then
      alias -g C='| xsel --input --clipboard'
    fi


    # HOME直下に.nvmが存在したら環境変数を設定する
    if [ -d $HOME/.nvm ] ; then
      source /usr/share/nvm/init-nvm.sh
    fi
    # nvmが存在したらnvmのinitとnodeのバージョンを指定する
    if which nvm > /dev/null 2>&1 ; then
      nvm use v0.10.38 > /dev/null
      export PATH=$HOME/.nvm/v0.10.38/bin:$PATH
    fi
  ;;
esac

########################################                          
#    _          _   _                  #
#   / \   _ __ | |_(_) __ _  ___ _ __  #
#  / _ \ | '_ \| __| |/ _` |/ _ \ '_ \ #
# / ___ \| | | | |_| | (_| |  __/ | | |#
#/_/   \_\_| |_|\__|_|\__, |\___|_| |_|#
#                     |___/            #
########################################

if [[ -f $HOME/.zsh/antigen/antigen.zsh ]]; then
  source $HOME/.zsh/antigen/antigen.zsh
  antigen bundle zsh-users/zsh-completions src
  antigen bundle zsh-users/zsh-syntax-highlighting
  antigen bundle mollifier/anyframe
  antigen apply

  # zsh-completions の設定
  fpath=($HOME/.zsh/zsh-completions/src(N-/) $fpath)

  # anyframe の設定

  # Ctrl-Pでコマンドを挿入できるようにする
  function peco-put-history() {  
    builtin history -n -r 1 \
      | anyframe-selector-auto "$LBUFFER" \
      | anyframe-action-put 
  }
  zle -N peco-put-history 
  bindkey '^x^p' peco-put-history
fi

